package drawingbot.files.exporters;

import drawingbot.DrawingBotV3;
import drawingbot.api.IPointFilter;
import drawingbot.files.ExportTask;
import drawingbot.files.FileUtils;
import drawingbot.plotting.PlottedPath;
import drawingbot.plotting.PlottingTask;
import drawingbot.plotting.PlottedPoint;
import drawingbot.utils.Limit;
import drawingbot.utils.Utils;

import java.awt.geom.AffineTransform;
import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.io.File;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

public class GCodeExporter {

    public static final int gcode_decimals = 3; // numbers of decimal places used on gcode exports
    public static final char gcode_decimal_seperator = '.';

    /**formats the value into GCODE Number Format*/
    private static String gcodeFormat(Float value) {
        String s = Utils.formatGCode(value);
        s = s.replace('.', gcode_decimal_seperator);
        s = s.replace(',', gcode_decimal_seperator);
        return s;
    }

    public static class GCodeBuilder{
        public PlottingTask task;
        private PrintWriter output;

        public boolean isPenDown;

        ///tallies
        public float distanceMoved;
        public float distanceDown;
        public float distanceUp;
        public int pointsDrawn;
        public int penLifts;
        public int penDrops;

        public float lastX = 0, lastY = 0;
        public Limit dx = new Limit(), dy = new Limit();

        public GCodeBuilder(PlottingTask task, PrintWriter output){
            this.task = task;
            this.output = output;
        }


        /**
         * Note comments can still be called before this, if needed
         */
        public void open(){
            comment("GCode generated by: " + DrawingBotV3.appName + " " + DrawingBotV3.appVersion);
            comment("Time: " + Utils.getDateAndTime());
            command("G21"); //programming in millimeters, mm
            command("G90"); //programming in absolute positioning
            if(DrawingBotV3.enableAutoHome.get()){
                command("G28");
            }
            command("G1 F8000"); //SET SPEED
            movePenUp();
        }

        /**
         * Must be called to save the file
         */
        public void close(){
            movePenUp();
            movePen(0, 0);

            comment("Distance Moved: " + gcodeFormat(distanceMoved) + " mm");
            comment("Distance Moved (Pen Up): " + gcodeFormat(distanceUp) + " mm");
            comment("Distance Moved (Pen Down): " + gcodeFormat(distanceDown) + " mm");
            comment("Points Plotted: " + pointsDrawn + " points");
            comment("Pen Lifted: " + penLifts + " times");
            comment("Pen Dropped: " + penDrops + " times");
            comment("Min X: " + gcodeFormat(dx.min) + " Max X: " + gcodeFormat(dx.max));
            comment("Min Y: " + gcodeFormat(dy.min) + " Max Y: " + gcodeFormat(dy.max));

            output.flush();
            output.close();
        }

        public void movePenUp(){
            if(isPenDown){
                output.println("G1 Z" + gcodeFormat(DrawingBotV3.penUpZ.get()));
                isPenDown = false;
                penLifts++;
            }
        }

        public void movePenDown(){
            if(!isPenDown){
                output.println("G1 Z" + gcodeFormat(DrawingBotV3.penDownZ.get()));
                isPenDown = true;
                penDrops++;
            }
        }

        public void move(float[] coords, int type){
            switch (type){
                case PathIterator.SEG_MOVETO:
                    movePenUp();
                    movePen(coords[0], coords[1]);
                    movePenDown();
                    break;
                case PathIterator.SEG_LINETO:
                    movePen(coords[0], coords[1]);
                    break;
            }
        }

        public void movePen(float xValue, float yValue){
            output.println("G1 X" + gcodeFormat(xValue) + " Y" + gcodeFormat(yValue));
            dx.update_limit(xValue);
            dy.update_limit(yValue);

            double distance = Point2D.distance(lastX, lastY, xValue, yValue);

            distanceMoved += distance;
            distanceUp += !isPenDown ? distance : 0;
            distanceDown += isPenDown ? distance : 0;

            if(isPenDown){
                pointsDrawn++;
            }

            lastX = xValue;
            lastY = yValue;
        }

        public void command(String command){
            output.println(command);
        }

        public void comment(String comment){
            output.println("(" + comment.replace(")", "") + ")" + "\n");
        }
    }


    public static void exportGCode(ExportTask exportTask, PlottingTask plottingTask, IPointFilter lineFilter, String extension, File saveLocation) {
        PrintWriter output = FileUtils.createWriter(saveLocation);
        GCodeBuilder builder = new GCodeBuilder(plottingTask, output);

        plottingTask.comments.forEach(builder::comment);
        builder.open();

        AffineTransform transform = plottingTask.createPrintTransform();
        List<PlottedPath> plottedPaths = plottingTask.plottedDrawing.generatePlottedPaths(lineFilter);

        float[] coords = new float[6];
        int i = 0;
        for(PlottedPath plottedPath : plottedPaths){
            PathIterator iterator = plottedPath.path.getPathIterator(transform);
            while(!iterator.isDone()){
                int type = iterator.currentSegment(coords);
                builder.move(coords, type);
                iterator.next();
            }
            i++;
            exportTask.updateProgress(i, plottedPaths.size()-1);
        }
        builder.close();
        DrawingBotV3.logger.info("GCode File Created:  " +  saveLocation);
    }

    public static void exportGCodeTest(ExportTask exportTask, PlottingTask plottingTask, IPointFilter lineFilter, String extension, File saveLocation) {
        List<PlottedPath> plottedPaths = plottingTask.plottedDrawing.generatePlottedPaths(lineFilter);
        AffineTransform transform = plottingTask.createPrintTransform();

        Limit dx = new Limit(), dy = new Limit();

        float[] coords = new float[6];
        int i = 0;
        for(PlottedPath plottedPath : plottedPaths){
            PathIterator iterator = plottedPath.path.getPathIterator(transform);
            while(!iterator.isDone()){
                int type = iterator.currentSegment(coords);
                dx.update_limit(coords[0]);
                dy.update_limit(coords[1]);
                iterator.next();
            }
            i++;
            exportTask.updateProgress(i, plottedPaths.size()-1);
        }

        String gname = FileUtils.removeExtension(saveLocation) + "gcode_test" + extension;
        PrintWriter output = FileUtils.createWriter(new File(gname));
        GCodeBuilder builder = new GCodeBuilder(plottingTask, output);

        builder.comment("This is a test file to draw the extremes of the drawing area.");
        builder.comment("Draws a 1cm mark on all four corners of the paper.");
        builder.comment("WARNING:  pen will be down.");
        builder.comment("Extremes of X: " + dx.min + " thru " + dx.max);
        builder.comment("Extremes of Y: " + dy.min + " thru " + dy.max);

        builder.open();

        float test_length = 10;

        builder.comment("Upper left");
        builder.movePen(dx.min, dy.min + test_length);
        builder.movePenDown();
        builder.movePen(dx.min, dy.min);
        builder.movePen(dx.min + test_length, dy.min);
        builder.movePenUp();

        builder.comment("Upper right");
        builder.movePen(dx.max - test_length, dy.min);
        builder.movePenDown();
        builder.movePen(dx.max, dy.min);
        builder.movePen(dx.max, dy.min + test_length);
        builder.movePenUp();

        builder.comment("Lower right");
        builder.movePen(dx.max,dy.max - test_length);
        builder.movePenDown();
        builder.movePen(dx.max, dy.max);
        builder.movePen(dx.max - test_length, dy.max);
        builder.movePenUp();

        builder.comment("Lower left");
        builder.movePen(dx.min + test_length, dy.max);
        builder.movePenDown();
        builder.movePen(dx.min, dy.max);
        builder.movePen(dx.min, dy.max - test_length);
        builder.movePenUp();

        exportTask.updateProgress(1,1);
    }


}
