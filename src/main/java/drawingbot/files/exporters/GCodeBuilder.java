package drawingbot.files.exporters;

import drawingbot.plotting.PlottingTask;
import drawingbot.utils.DBConstants;
import drawingbot.utils.Limit;
import drawingbot.utils.Utils;

import java.awt.geom.PathIterator;
import java.awt.geom.Point2D;
import java.io.PrintWriter;

public class GCodeBuilder {
    public PlottingTask task;
    private PrintWriter output;

    public boolean isPenDown;

    ///tallies
    public float distanceMoved;
    public float distanceDown;
    public float distanceUp;
    public int pointsDrawn;
    public int penLifts;
    public int penDrops;

    public float lastX = 0, lastY = 0;
    public Limit dx = new Limit(), dy = new Limit();

    public GCodeBuilder(PlottingTask task, PrintWriter output) {
        this.task = task;
        this.output = output;
    }

    /**
     * Note comments can still be called before this, if needed
     */
    public void open() {
        comment("GCode generated by: " + DBConstants.appName + " " + DBConstants.appVersion);
        comment("Time: " + Utils.getDateAndTime());
        command(GCodeExporter.defaultStartCode);

        isPenDown = true; //forces the first pen up command
        movePenUp();
    }

    /**
     * Must be called to save the file
     */
    public void close() {
        movePenUp();
        movePen(0, 0);
        command(GCodeExporter.defaultEndCode);

        comment("Distance Moved: " + Utils.gcodeFloat(distanceMoved) + " mm");
        comment("Distance Moved (Pen Up): " + Utils.gcodeFloat(distanceUp) + " mm");
        comment("Distance Moved (Pen Down): " + Utils.gcodeFloat(distanceDown) + " mm");
        comment("Points Plotted: " + pointsDrawn + " points");
        comment("Pen Lifted: " + penLifts + " times");
        comment("Pen Dropped: " + penDrops + " times");
        comment("Min X: " + Utils.gcodeFloat(dx.min) + " Max X: " + Utils.gcodeFloat(dx.max));
        comment("Min Y: " + Utils.gcodeFloat(dy.min) + " Max Y: " + Utils.gcodeFloat(dy.max));

        output.flush();
        output.close();
    }

    public void movePenUp() {
        if (isPenDown) {
            output.println(GCodeExporter.defaultPenUpCode);
            isPenDown = false;
            penLifts++;
        }
    }

    public void movePenDown() {
        if (!isPenDown) {
            output.println(GCodeExporter.defaultPenDownCode);
            isPenDown = true;
            penDrops++;
        }
    }

    public void move(float[] coords, int type) {
        switch (type) {
            case PathIterator.SEG_MOVETO:
                movePenUp();
                movePen(coords[0], coords[1]);
                movePenDown();
                break;
            case PathIterator.SEG_LINETO:
                movePen(coords[0], coords[1]);
                break;
        }
    }

    public void movePen(float xValue, float yValue) {
        output.println("G1 X" + Utils.gcodeFloat(xValue) + " Y" + Utils.gcodeFloat(yValue));
        dx.update_limit(xValue);
        dy.update_limit(yValue);

        double distance = Point2D.distance(lastX, lastY, xValue, yValue);

        distanceMoved += distance;
        distanceUp += !isPenDown ? distance : 0;
        distanceDown += isPenDown ? distance : 0;

        if (isPenDown) {
            pointsDrawn++;
        }

        lastX = xValue;
        lastY = yValue;
    }

    public void command(String command) {
        output.println(command);
    }

    public void comment(String comment) {
        output.println("(" + comment.replace(")", "") + ")" + "\n");
    }

}
